<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Kaltura Wave"
               height="310"
               author="papyromancer"
               author_email="papyromancer@lightcorp.net">
    <Require feature="wave" />
    <Require feature="dynamic-height" />
    <Require feature="tabs" />
    <Require feature="flash" />
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
      <div id="player" style="display:none">
        <div id="kplayer" style="text-align:center"></div>
      </div>
      <div id="editor"style="display:none">Editor Goes Here</div>
      <div id="media_adder" style="display:none">
        <h1>Media Management</h1>
        <p>Media Management, by virtue of its user centric and user specific nature of allowing users to add files from their own computer terminals, is a private action.  While the wave state is shared within the editing and playback tabs, adding media is a purely personal task, and exposing the add media widget to group editing is likely to cause innumerable probs.</p>
        <p>Neither the switch to the 'Add Media' tab nor the state of the 'Add Media' widget shall ever be recorded within the wave state.</p>
        <p>Media management is not available to wave state.</p>
      </div>
      <div id="debug"style="display:none">
        <div id="debug_message"></div>
        <div id="debug_state"></div>
      </div>
      
      <script type="text/javascript" src="js/jquery-1.2.6.min.js"></script>
      <script type="text/javascript" src="http://wave-api.appspot.com/public/wave.js"></script>

      <script type="text/javascript">
        // Set Player as default tab
        var tabs = new gadgets.TabSet(__MODULE_ID__, "Play");
        
        // Init!
        function initialize() {
          
          // Define Tabs
          tabs.addTab("Play", {
                              contentContainer: document.getElementById("player")
                              });
          tabs.addTab("Edit", {
                              contentContainer: document.getElementById("editor")
                              });
          tabs.addTab("Add Media", {
                              contentContainer: document.getElementById("media_adder")
                              });
          tabs.addTab("Debug", {
                              contentContainer: document.getElementById("debug")
                              });
          
          // Make wave state aware
            if (wave && wave.isInWaveContainer()) {
              wave.setStateCallback(receiveState, this);
              wave.setModeCallback(receiveMode, this);
            };
        };

        // Get state for the debug console
//        var debug_state = document.getElementById('debug_state');
//        var debug_message = document.getElementById('debug_message');
//        function stateUpdated() {
//          if(!wave.getState()) {
//            debug_state.innerHTML = "The state is empty.";
//          }
//          else {
//            debug_state.innerHTML = "The state is " + wave.State.toString();
//          } 
//        };
//        function debugState() {
//          stateUpdated();
//        };


//        function changeState(key, value) {
//          wave.getState().submitDelta({(key): (value)});
//        };
//        function debugMessage(message) {
//          debug_message.innerHTML = "Registered Message: " + message;
//        };


        
        // Function to populate kplayer with current video
        function wavePlay(entry_id) {
        
          // Set Variables for kplayer
          var kvars = {
                      entry_id: entry_id //"knrwbq7z4o"
                      };
          
          // kflashvars should be constructed from the kvars object
          var kflashvars = "entry_id="+entry_id // knrwbq7z4o"
          
          var kparams = {
                        allowscriptaccess: "always",
                        allownetworking: "all",
                        allowfullscreen: "true",
                        wmode: "opaque",
                        width: "400",
                        height: "290"
                        };
          // embed kplayer
          gadgets.flash.embedFlash("http://www.kaltura.com/kwidget/wid/_39061/ui_conf_id/1008311?"+kflashvars, "kplayer", "9.0.0", kparams );
        };
        
        // Make sure there is an entry_id in wave state
//        function entrySanity() {
//          if ((wave.State.get('entry_id'))) {
//              debugMessage((wave.State.get()));
//            wave.State.submitDelta({'entryid': 'knrwbq7z4o'});
//          };
//        };
        
//        entrySanity();
//        wavePlay((wave.getState().get.('entry_id)));

        // This will display a messge in the debug tab
//        var testvalue = "testing, testing, 1, 2, 3";
        
//        function testState() {
//          wave.getState().submitDelta({'testkey': 'testvalue'});
//        };

//        testState();

//        debugMessage(testvalue);
        

        // Call init function to initialize and display tabs.
        gadgets.util.registerOnLoadHandler(initialize);
        
        wavePlay("knrwbq7z4o");
//        gadgets.window.adjustHeight();
        </script>
    ]]>
  </Content>
</Module>
